[{"source": "https://tpaschalis.github.io", "title": "How does Go calculate len()..? \u2013 tpaschalis \u2013 software, systems", "description": "The impetus for this post was a question on the Gophers Slack a while back. A fellow developer wanted to know where to find more information on len.  ", "link": "https://tpaschalis.github.io/golang-len/", "date_published": "2021-08-06 16:26:22.689726+00:00", "persistent": true, "user": "Thomas Pain", "language": ">len</code>.</p>\n\n<blockquote>\n  <p>I want to know how the len func gets called.</p>\n</blockquote>\n\n<p>People chimed in quickly with a correct answer</p>\n\n<blockquote>\n  <p>It doesn\u2019t. Len is compiler magic, not an actual function call.</p>\n</blockquote>\n\n<blockquote>\n  <p>\u2026 all the types len works on have the same header format, the compiler just treats the object like a header and returns the integer representing the length of elements</p>\n</blockquote>\n\n<p>And while those answers are technically true, I thought it would be nice to unfurl the layers that make up this \u2018magic\u2019 in a concise explanation! It was also a nice little exercise into getting more insight about the inner workings of the Go compiler.</p>\n\n<p>FYI, all links in this post point to the soon-to-be-released <a href="}]